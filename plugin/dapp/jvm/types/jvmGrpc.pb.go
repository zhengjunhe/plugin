// Code generated by protoc-gen-go. DO NOT EDIT.
// source: jvmGrpc.proto

package types

import (
	context "context"
	fmt "fmt"
	types "github.com/33cn/chain33/types"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type TokenOperPara struct {
	From                 string   `protobuf:"bytes,1,opt,name=from,proto3" json:"from,omitempty"`
	To                   string   `protobuf:"bytes,2,opt,name=to,proto3" json:"to,omitempty"`
	ExecAddr             string   `protobuf:"bytes,3,opt,name=execAddr,proto3" json:"execAddr,omitempty"`
	Amount               int64    `protobuf:"varint,4,opt,name=amount,proto3" json:"amount,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TokenOperPara) Reset()         { *m = TokenOperPara{} }
func (m *TokenOperPara) String() string { return proto.CompactTextString(m) }
func (*TokenOperPara) ProtoMessage()    {}
func (*TokenOperPara) Descriptor() ([]byte, []int) {
	return fileDescriptor_9ff7f5ea06ca28f8, []int{0}
}

func (m *TokenOperPara) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TokenOperPara.Unmarshal(m, b)
}
func (m *TokenOperPara) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TokenOperPara.Marshal(b, m, deterministic)
}
func (m *TokenOperPara) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TokenOperPara.Merge(m, src)
}
func (m *TokenOperPara) XXX_Size() int {
	return xxx_messageInfo_TokenOperPara.Size(m)
}
func (m *TokenOperPara) XXX_DiscardUnknown() {
	xxx_messageInfo_TokenOperPara.DiscardUnknown(m)
}

var xxx_messageInfo_TokenOperPara proto.InternalMessageInfo

func (m *TokenOperPara) GetFrom() string {
	if m != nil {
		return m.From
	}
	return ""
}

func (m *TokenOperPara) GetTo() string {
	if m != nil {
		return m.To
	}
	return ""
}

func (m *TokenOperPara) GetExecAddr() string {
	if m != nil {
		return m.ExecAddr
	}
	return ""
}

func (m *TokenOperPara) GetAmount() int64 {
	if m != nil {
		return m.Amount
	}
	return 0
}

type OpResult struct {
	Result               bool     `protobuf:"varint,1,opt,name=result,proto3" json:"result,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *OpResult) Reset()         { *m = OpResult{} }
func (m *OpResult) String() string { return proto.CompactTextString(m) }
func (*OpResult) ProtoMessage()    {}
func (*OpResult) Descriptor() ([]byte, []int) {
	return fileDescriptor_9ff7f5ea06ca28f8, []int{1}
}

func (m *OpResult) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_OpResult.Unmarshal(m, b)
}
func (m *OpResult) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_OpResult.Marshal(b, m, deterministic)
}
func (m *OpResult) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OpResult.Merge(m, src)
}
func (m *OpResult) XXX_Size() int {
	return xxx_messageInfo_OpResult.Size(m)
}
func (m *OpResult) XXX_DiscardUnknown() {
	xxx_messageInfo_OpResult.DiscardUnknown(m)
}

var xxx_messageInfo_OpResult proto.InternalMessageInfo

func (m *OpResult) GetResult() bool {
	if m != nil {
		return m.Result
	}
	return false
}

type RandomData struct {
	Random               []byte   `protobuf:"bytes,1,opt,name=random,proto3" json:"random,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RandomData) Reset()         { *m = RandomData{} }
func (m *RandomData) String() string { return proto.CompactTextString(m) }
func (*RandomData) ProtoMessage()    {}
func (*RandomData) Descriptor() ([]byte, []int) {
	return fileDescriptor_9ff7f5ea06ca28f8, []int{2}
}

func (m *RandomData) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RandomData.Unmarshal(m, b)
}
func (m *RandomData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RandomData.Marshal(b, m, deterministic)
}
func (m *RandomData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RandomData.Merge(m, src)
}
func (m *RandomData) XXX_Size() int {
	return xxx_messageInfo_RandomData.Size(m)
}
func (m *RandomData) XXX_DiscardUnknown() {
	xxx_messageInfo_RandomData.DiscardUnknown(m)
}

var xxx_messageInfo_RandomData proto.InternalMessageInfo

func (m *RandomData) GetRandom() []byte {
	if m != nil {
		return m.Random
	}
	return nil
}

type SetDBPara struct {
	Key                  []byte   `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	Value                []byte   `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SetDBPara) Reset()         { *m = SetDBPara{} }
func (m *SetDBPara) String() string { return proto.CompactTextString(m) }
func (*SetDBPara) ProtoMessage()    {}
func (*SetDBPara) Descriptor() ([]byte, []int) {
	return fileDescriptor_9ff7f5ea06ca28f8, []int{3}
}

func (m *SetDBPara) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SetDBPara.Unmarshal(m, b)
}
func (m *SetDBPara) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SetDBPara.Marshal(b, m, deterministic)
}
func (m *SetDBPara) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SetDBPara.Merge(m, src)
}
func (m *SetDBPara) XXX_Size() int {
	return xxx_messageInfo_SetDBPara.Size(m)
}
func (m *SetDBPara) XXX_DiscardUnknown() {
	xxx_messageInfo_SetDBPara.DiscardUnknown(m)
}

var xxx_messageInfo_SetDBPara proto.InternalMessageInfo

func (m *SetDBPara) GetKey() []byte {
	if m != nil {
		return m.Key
	}
	return nil
}

func (m *SetDBPara) GetValue() []byte {
	if m != nil {
		return m.Value
	}
	return nil
}

type GetRequest struct {
	Key                  []byte   `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	ContractAddr         string   `protobuf:"bytes,2,opt,name=contractAddr,proto3" json:"contractAddr,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetRequest) Reset()         { *m = GetRequest{} }
func (m *GetRequest) String() string { return proto.CompactTextString(m) }
func (*GetRequest) ProtoMessage()    {}
func (*GetRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_9ff7f5ea06ca28f8, []int{4}
}

func (m *GetRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetRequest.Unmarshal(m, b)
}
func (m *GetRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetRequest.Marshal(b, m, deterministic)
}
func (m *GetRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetRequest.Merge(m, src)
}
func (m *GetRequest) XXX_Size() int {
	return xxx_messageInfo_GetRequest.Size(m)
}
func (m *GetRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetRequest proto.InternalMessageInfo

func (m *GetRequest) GetKey() []byte {
	if m != nil {
		return m.Key
	}
	return nil
}

func (m *GetRequest) GetContractAddr() string {
	if m != nil {
		return m.ContractAddr
	}
	return ""
}

type GetResponse struct {
	Value                []byte   `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetResponse) Reset()         { *m = GetResponse{} }
func (m *GetResponse) String() string { return proto.CompactTextString(m) }
func (*GetResponse) ProtoMessage()    {}
func (*GetResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_9ff7f5ea06ca28f8, []int{5}
}

func (m *GetResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetResponse.Unmarshal(m, b)
}
func (m *GetResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetResponse.Marshal(b, m, deterministic)
}
func (m *GetResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetResponse.Merge(m, src)
}
func (m *GetResponse) XXX_Size() int {
	return xxx_messageInfo_GetResponse.Size(m)
}
func (m *GetResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetResponse proto.InternalMessageInfo

func (m *GetResponse) GetValue() []byte {
	if m != nil {
		return m.Value
	}
	return nil
}

type ValueSize struct {
	Size                 int32    `protobuf:"varint,1,opt,name=size,proto3" json:"size,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ValueSize) Reset()         { *m = ValueSize{} }
func (m *ValueSize) String() string { return proto.CompactTextString(m) }
func (*ValueSize) ProtoMessage()    {}
func (*ValueSize) Descriptor() ([]byte, []int) {
	return fileDescriptor_9ff7f5ea06ca28f8, []int{6}
}

func (m *ValueSize) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ValueSize.Unmarshal(m, b)
}
func (m *ValueSize) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ValueSize.Marshal(b, m, deterministic)
}
func (m *ValueSize) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ValueSize.Merge(m, src)
}
func (m *ValueSize) XXX_Size() int {
	return xxx_messageInfo_ValueSize.Size(m)
}
func (m *ValueSize) XXX_DiscardUnknown() {
	xxx_messageInfo_ValueSize.DiscardUnknown(m)
}

var xxx_messageInfo_ValueSize proto.InternalMessageInfo

func (m *ValueSize) GetSize() int32 {
	if m != nil {
		return m.Size
	}
	return 0
}

type FromAddr struct {
	From                 string   `protobuf:"bytes,1,opt,name=from,proto3" json:"from,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *FromAddr) Reset()         { *m = FromAddr{} }
func (m *FromAddr) String() string { return proto.CompactTextString(m) }
func (*FromAddr) ProtoMessage()    {}
func (*FromAddr) Descriptor() ([]byte, []int) {
	return fileDescriptor_9ff7f5ea06ca28f8, []int{7}
}

func (m *FromAddr) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_FromAddr.Unmarshal(m, b)
}
func (m *FromAddr) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_FromAddr.Marshal(b, m, deterministic)
}
func (m *FromAddr) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FromAddr.Merge(m, src)
}
func (m *FromAddr) XXX_Size() int {
	return xxx_messageInfo_FromAddr.Size(m)
}
func (m *FromAddr) XXX_DiscardUnknown() {
	xxx_messageInfo_FromAddr.DiscardUnknown(m)
}

var xxx_messageInfo_FromAddr proto.InternalMessageInfo

func (m *FromAddr) GetFrom() string {
	if m != nil {
		return m.From
	}
	return ""
}

func init() {
	proto.RegisterType((*TokenOperPara)(nil), "types.TokenOperPara")
	proto.RegisterType((*OpResult)(nil), "types.OpResult")
	proto.RegisterType((*RandomData)(nil), "types.RandomData")
	proto.RegisterType((*SetDBPara)(nil), "types.SetDBPara")
	proto.RegisterType((*GetRequest)(nil), "types.GetRequest")
	proto.RegisterType((*GetResponse)(nil), "types.GetResponse")
	proto.RegisterType((*ValueSize)(nil), "types.ValueSize")
	proto.RegisterType((*FromAddr)(nil), "types.FromAddr")
}

func init() {
	proto.RegisterFile("jvmGrpc.proto", fileDescriptor_9ff7f5ea06ca28f8)
}

var fileDescriptor_9ff7f5ea06ca28f8 = []byte{
	// 457 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x53, 0x4d, 0x6f, 0x13, 0x31,
	0x10, 0xcd, 0x67, 0x49, 0x86, 0x4d, 0x69, 0xad, 0x0a, 0x45, 0x7b, 0x80, 0xca, 0x70, 0xa8, 0x84,
	0x14, 0x04, 0x15, 0x42, 0x70, 0x6b, 0x14, 0xba, 0x17, 0x44, 0x91, 0x53, 0x71, 0x37, 0x9b, 0x29,
	0x4a, 0x9b, 0xb5, 0xb7, 0xde, 0x49, 0xd4, 0xe6, 0x9f, 0xf2, 0x6f, 0xd0, 0xce, 0xda, 0x9b, 0x16,
	0xe5, 0x90, 0xde, 0xe6, 0x4d, 0xde, 0xb3, 0x9f, 0xdf, 0xcb, 0xc2, 0xe0, 0x7a, 0x95, 0x25, 0x2e,
	0x4f, 0x47, 0xb9, 0xb3, 0x64, 0x45, 0x97, 0xee, 0x73, 0x2c, 0xe2, 0x28, 0xb5, 0x59, 0x66, 0x4d,
	0xb5, 0x94, 0x7f, 0x60, 0x70, 0x69, 0x6f, 0xd0, 0x5c, 0xe4, 0xe8, 0x7e, 0x6a, 0xa7, 0x85, 0x80,
	0xce, 0x95, 0xb3, 0xd9, 0xb0, 0x79, 0xdc, 0x3c, 0xe9, 0x2b, 0x9e, 0xc5, 0x3e, 0xb4, 0xc8, 0x0e,
	0x5b, 0xbc, 0x69, 0x91, 0x15, 0x31, 0xf4, 0xf0, 0x0e, 0xd3, 0xb3, 0xd9, 0xcc, 0x0d, 0xdb, 0xbc,
	0xad, 0xb1, 0x78, 0x09, 0x7b, 0x3a, 0xb3, 0x4b, 0x43, 0xc3, 0xce, 0x71, 0xf3, 0xa4, 0xad, 0x3c,
	0x92, 0x12, 0x7a, 0x17, 0xb9, 0xc2, 0x62, 0xb9, 0xa0, 0x92, 0xe3, 0x78, 0xe2, 0x5b, 0x7a, 0xca,
	0x23, 0xf9, 0x16, 0x40, 0x69, 0x33, 0xb3, 0xd9, 0x44, 0x93, 0x66, 0x16, 0x23, 0x66, 0x45, 0xca,
	0x23, 0x79, 0x0a, 0xfd, 0x29, 0xd2, 0x64, 0xcc, 0x76, 0x0f, 0xa0, 0x7d, 0x83, 0xf7, 0x9e, 0x51,
	0x8e, 0xe2, 0x08, 0xba, 0x2b, 0xbd, 0x58, 0x22, 0xfb, 0x8d, 0x54, 0x05, 0xe4, 0x18, 0x20, 0x41,
	0x52, 0x78, 0xbb, 0xc4, 0x82, 0xb6, 0xa8, 0x24, 0x44, 0xa9, 0x35, 0xe4, 0x74, 0x4a, 0xfc, 0xac,
	0xea, 0xb1, 0x8f, 0x76, 0xf2, 0x0d, 0x3c, 0xe7, 0x33, 0x8a, 0xdc, 0x9a, 0x02, 0x37, 0x17, 0x35,
	0x1f, 0x5e, 0xf4, 0x1a, 0xfa, 0xbf, 0xca, 0x61, 0x3a, 0x5f, 0x63, 0x19, 0x66, 0x31, 0x5f, 0x57,
	0x8c, 0xae, 0xe2, 0x59, 0xbe, 0x82, 0xde, 0xb9, 0xb3, 0x19, 0x87, 0xb5, 0x25, 0xec, 0x8f, 0x7f,
	0x3b, 0xd0, 0xbe, 0x5e, 0x65, 0xe2, 0x13, 0xc0, 0xb7, 0x3b, 0x4c, 0xcf, 0x9d, 0x5d, 0xa3, 0x11,
	0x47, 0x23, 0x6e, 0x6f, 0xf4, 0xa8, 0xac, 0xf8, 0x85, 0xdf, 0x86, 0x64, 0x65, 0x23, 0xc8, 0xce,
	0x52, 0x9a, 0xaf, 0x70, 0x77, 0xd9, 0x67, 0x88, 0x4a, 0xd9, 0xa5, 0xd3, 0xa6, 0xb8, 0x42, 0xb7,
	0xbb, 0xf0, 0x3d, 0xf4, 0xcb, 0x50, 0xb8, 0x1a, 0x31, 0xf0, 0xbf, 0x2b, 0xbc, 0xfd, 0x31, 0x5f,
	0xc4, 0x87, 0x01, 0xd6, 0xa5, 0xca, 0x86, 0x78, 0x07, 0xcf, 0x12, 0xa4, 0x32, 0x82, 0xff, 0xe9,
	0xe1, 0xf4, 0x10, 0x8f, 0x6c, 0x88, 0x0f, 0x00, 0x53, 0xa4, 0x29, 0x69, 0xc2, 0xc9, 0x58, 0x1c,
	0x78, 0x42, 0x5d, 0xff, 0x36, 0x43, 0x5f, 0x60, 0xdf, 0x9f, 0x1f, 0x64, 0xc1, 0xc6, 0xe6, 0x0f,
	0x10, 0x8b, 0x87, 0xab, 0xaa, 0x4f, 0xce, 0x2e, 0x4a, 0x90, 0x36, 0xf5, 0x6d, 0x11, 0x06, 0x0b,
	0x35, 0xa9, 0x36, 0xf9, 0xdd, 0xa6, 0x7a, 0xf1, 0x74, 0x93, 0x41, 0xb6, 0xb3, 0xc9, 0xaf, 0x70,
	0x98, 0xf8, 0xdb, 0x9e, 0xea, 0xf4, 0xf7, 0x1e, 0x7f, 0xf4, 0xa7, 0xff, 0x02, 0x00, 0x00, 0xff,
	0xff, 0x8c, 0xf7, 0xec, 0xa5, 0x1a, 0x04, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// JvmClient is the client API for Jvm service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type JvmClient interface {
	ExecFrozen(ctx context.Context, in *TokenOperPara, opts ...grpc.CallOption) (*OpResult, error)
	ExecActive(ctx context.Context, in *TokenOperPara, opts ...grpc.CallOption) (*OpResult, error)
	ExecTransfer(ctx context.Context, in *TokenOperPara, opts ...grpc.CallOption) (*OpResult, error)
	GetRandom(ctx context.Context, in *types.ReqNil, opts ...grpc.CallOption) (*RandomData, error)
	GetFrom(ctx context.Context, in *types.ReqNil, opts ...grpc.CallOption) (*FromAddr, error)
	//state db 相关操作
	SetStateDB(ctx context.Context, in *SetDBPara, opts ...grpc.CallOption) (*OpResult, error)
	GetFromStateDB(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*GetResponse, error)
	GetValueSize(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*ValueSize, error)
	//local db 相关操作
	SetLocalDB(ctx context.Context, in *SetDBPara, opts ...grpc.CallOption) (*OpResult, error)
	GetFromLocalDB(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*GetResponse, error)
	GetLocalValueSize(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*ValueSize, error)
}

type jvmClient struct {
	cc grpc.ClientConnInterface
}

func NewJvmClient(cc grpc.ClientConnInterface) JvmClient {
	return &jvmClient{cc}
}

func (c *jvmClient) ExecFrozen(ctx context.Context, in *TokenOperPara, opts ...grpc.CallOption) (*OpResult, error) {
	out := new(OpResult)
	err := c.cc.Invoke(ctx, "/types.jvm/ExecFrozen", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jvmClient) ExecActive(ctx context.Context, in *TokenOperPara, opts ...grpc.CallOption) (*OpResult, error) {
	out := new(OpResult)
	err := c.cc.Invoke(ctx, "/types.jvm/ExecActive", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jvmClient) ExecTransfer(ctx context.Context, in *TokenOperPara, opts ...grpc.CallOption) (*OpResult, error) {
	out := new(OpResult)
	err := c.cc.Invoke(ctx, "/types.jvm/ExecTransfer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jvmClient) GetRandom(ctx context.Context, in *types.ReqNil, opts ...grpc.CallOption) (*RandomData, error) {
	out := new(RandomData)
	err := c.cc.Invoke(ctx, "/types.jvm/GetRandom", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jvmClient) GetFrom(ctx context.Context, in *types.ReqNil, opts ...grpc.CallOption) (*FromAddr, error) {
	out := new(FromAddr)
	err := c.cc.Invoke(ctx, "/types.jvm/GetFrom", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jvmClient) SetStateDB(ctx context.Context, in *SetDBPara, opts ...grpc.CallOption) (*OpResult, error) {
	out := new(OpResult)
	err := c.cc.Invoke(ctx, "/types.jvm/SetStateDB", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jvmClient) GetFromStateDB(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*GetResponse, error) {
	out := new(GetResponse)
	err := c.cc.Invoke(ctx, "/types.jvm/GetFromStateDB", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jvmClient) GetValueSize(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*ValueSize, error) {
	out := new(ValueSize)
	err := c.cc.Invoke(ctx, "/types.jvm/GetValueSize", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jvmClient) SetLocalDB(ctx context.Context, in *SetDBPara, opts ...grpc.CallOption) (*OpResult, error) {
	out := new(OpResult)
	err := c.cc.Invoke(ctx, "/types.jvm/SetLocalDB", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jvmClient) GetFromLocalDB(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*GetResponse, error) {
	out := new(GetResponse)
	err := c.cc.Invoke(ctx, "/types.jvm/GetFromLocalDB", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jvmClient) GetLocalValueSize(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*ValueSize, error) {
	out := new(ValueSize)
	err := c.cc.Invoke(ctx, "/types.jvm/GetLocalValueSize", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// JvmServer is the server API for Jvm service.
type JvmServer interface {
	ExecFrozen(context.Context, *TokenOperPara) (*OpResult, error)
	ExecActive(context.Context, *TokenOperPara) (*OpResult, error)
	ExecTransfer(context.Context, *TokenOperPara) (*OpResult, error)
	GetRandom(context.Context, *types.ReqNil) (*RandomData, error)
	GetFrom(context.Context, *types.ReqNil) (*FromAddr, error)
	//state db 相关操作
	SetStateDB(context.Context, *SetDBPara) (*OpResult, error)
	GetFromStateDB(context.Context, *GetRequest) (*GetResponse, error)
	GetValueSize(context.Context, *GetRequest) (*ValueSize, error)
	//local db 相关操作
	SetLocalDB(context.Context, *SetDBPara) (*OpResult, error)
	GetFromLocalDB(context.Context, *GetRequest) (*GetResponse, error)
	GetLocalValueSize(context.Context, *GetRequest) (*ValueSize, error)
}

// UnimplementedJvmServer can be embedded to have forward compatible implementations.
type UnimplementedJvmServer struct {
}

func (*UnimplementedJvmServer) ExecFrozen(ctx context.Context, req *TokenOperPara) (*OpResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExecFrozen not implemented")
}
func (*UnimplementedJvmServer) ExecActive(ctx context.Context, req *TokenOperPara) (*OpResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExecActive not implemented")
}
func (*UnimplementedJvmServer) ExecTransfer(ctx context.Context, req *TokenOperPara) (*OpResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExecTransfer not implemented")
}
func (*UnimplementedJvmServer) GetRandom(ctx context.Context, req *types.ReqNil) (*RandomData, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRandom not implemented")
}
func (*UnimplementedJvmServer) GetFrom(ctx context.Context, req *types.ReqNil) (*FromAddr, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFrom not implemented")
}
func (*UnimplementedJvmServer) SetStateDB(ctx context.Context, req *SetDBPara) (*OpResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetStateDB not implemented")
}
func (*UnimplementedJvmServer) GetFromStateDB(ctx context.Context, req *GetRequest) (*GetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFromStateDB not implemented")
}
func (*UnimplementedJvmServer) GetValueSize(ctx context.Context, req *GetRequest) (*ValueSize, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetValueSize not implemented")
}
func (*UnimplementedJvmServer) SetLocalDB(ctx context.Context, req *SetDBPara) (*OpResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetLocalDB not implemented")
}
func (*UnimplementedJvmServer) GetFromLocalDB(ctx context.Context, req *GetRequest) (*GetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFromLocalDB not implemented")
}
func (*UnimplementedJvmServer) GetLocalValueSize(ctx context.Context, req *GetRequest) (*ValueSize, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLocalValueSize not implemented")
}

func RegisterJvmServer(s *grpc.Server, srv JvmServer) {
	s.RegisterService(&_Jvm_serviceDesc, srv)
}

func _Jvm_ExecFrozen_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TokenOperPara)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JvmServer).ExecFrozen(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/types.jvm/ExecFrozen",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JvmServer).ExecFrozen(ctx, req.(*TokenOperPara))
	}
	return interceptor(ctx, in, info, handler)
}

func _Jvm_ExecActive_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TokenOperPara)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JvmServer).ExecActive(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/types.jvm/ExecActive",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JvmServer).ExecActive(ctx, req.(*TokenOperPara))
	}
	return interceptor(ctx, in, info, handler)
}

func _Jvm_ExecTransfer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TokenOperPara)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JvmServer).ExecTransfer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/types.jvm/ExecTransfer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JvmServer).ExecTransfer(ctx, req.(*TokenOperPara))
	}
	return interceptor(ctx, in, info, handler)
}

func _Jvm_GetRandom_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(types.ReqNil)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JvmServer).GetRandom(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/types.jvm/GetRandom",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JvmServer).GetRandom(ctx, req.(*types.ReqNil))
	}
	return interceptor(ctx, in, info, handler)
}

func _Jvm_GetFrom_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(types.ReqNil)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JvmServer).GetFrom(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/types.jvm/GetFrom",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JvmServer).GetFrom(ctx, req.(*types.ReqNil))
	}
	return interceptor(ctx, in, info, handler)
}

func _Jvm_SetStateDB_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetDBPara)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JvmServer).SetStateDB(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/types.jvm/SetStateDB",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JvmServer).SetStateDB(ctx, req.(*SetDBPara))
	}
	return interceptor(ctx, in, info, handler)
}

func _Jvm_GetFromStateDB_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JvmServer).GetFromStateDB(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/types.jvm/GetFromStateDB",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JvmServer).GetFromStateDB(ctx, req.(*GetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Jvm_GetValueSize_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JvmServer).GetValueSize(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/types.jvm/GetValueSize",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JvmServer).GetValueSize(ctx, req.(*GetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Jvm_SetLocalDB_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetDBPara)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JvmServer).SetLocalDB(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/types.jvm/SetLocalDB",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JvmServer).SetLocalDB(ctx, req.(*SetDBPara))
	}
	return interceptor(ctx, in, info, handler)
}

func _Jvm_GetFromLocalDB_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JvmServer).GetFromLocalDB(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/types.jvm/GetFromLocalDB",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JvmServer).GetFromLocalDB(ctx, req.(*GetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Jvm_GetLocalValueSize_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JvmServer).GetLocalValueSize(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/types.jvm/GetLocalValueSize",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JvmServer).GetLocalValueSize(ctx, req.(*GetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Jvm_serviceDesc = grpc.ServiceDesc{
	ServiceName: "types.jvm",
	HandlerType: (*JvmServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ExecFrozen",
			Handler:    _Jvm_ExecFrozen_Handler,
		},
		{
			MethodName: "ExecActive",
			Handler:    _Jvm_ExecActive_Handler,
		},
		{
			MethodName: "ExecTransfer",
			Handler:    _Jvm_ExecTransfer_Handler,
		},
		{
			MethodName: "GetRandom",
			Handler:    _Jvm_GetRandom_Handler,
		},
		{
			MethodName: "GetFrom",
			Handler:    _Jvm_GetFrom_Handler,
		},
		{
			MethodName: "SetStateDB",
			Handler:    _Jvm_SetStateDB_Handler,
		},
		{
			MethodName: "GetFromStateDB",
			Handler:    _Jvm_GetFromStateDB_Handler,
		},
		{
			MethodName: "GetValueSize",
			Handler:    _Jvm_GetValueSize_Handler,
		},
		{
			MethodName: "SetLocalDB",
			Handler:    _Jvm_SetLocalDB_Handler,
		},
		{
			MethodName: "GetFromLocalDB",
			Handler:    _Jvm_GetFromLocalDB_Handler,
		},
		{
			MethodName: "GetLocalValueSize",
			Handler:    _Jvm_GetLocalValueSize_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "jvmGrpc.proto",
}
