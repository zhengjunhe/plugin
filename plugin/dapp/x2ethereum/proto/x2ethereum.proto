syntax = "proto3";
package types;

enum EthBridgeStatus {
    PendingStatusText = 0;
    SuccessStatusText = 1;
    FailedStatusText = 2;
}

message X2ethereumAction {
    oneof value {
        EthBridgeClaim ethBridgeClaim = 1;
        MsgBurn msgBurn = 2;
        MsgLock msgLock = 3;
        MsgValidator msgLogInValidator = 4;
        MsgValidator msgLogOutValidator = 5;
        MsgSetConsensusNeeded msgSetConsensusNeeded = 6;
    }
    int32 ty = 10;
}

message MsgSetConsensusNeeded {
    double power = 1;
}

message MsgValidator {
    string address = 1;
    double power = 2;
}

// EthBridgeClaim is a structure that contains all the data for a particular bridge claim
message EthBridgeClaim {
    int64 EthereumChainID = 1;
    string BridgeContractAddress = 2;
    int64 Nonce = 3;
    string localCoinSymbol = 4;
    string localCoinExec = 5;
    string TokenContractAddress = 6;
    string EthereumSender = 7;
    string Chain33Receiver = 8;
    string ValidatorAddress = 9;
    uint64 Amount = 10;
    int64 ClaimType = 11;
    string EthSymbol = 12;
}

// OracleClaimContent is the details of how the content of the claim for each validator will be stored in the oracle
message OracleClaimContent {
    string Chain33Receiver = 1;
    uint64 Amount = 2;
    int64 ClaimType = 3;
}

// MsgBurn defines a message for burning coins and triggering a related event
message MsgBurn {
    int64 EthereumChainID = 1;
    string TokenContract = 2;
    string Chain33Sender = 3;
    string EthereumReceiver = 4;
    uint64 Amount = 5;
    string localCoinSymbol = 6;
    string localCoinExec = 7;
}

// MsgLock defines a message for locking coins and triggering a related event
message MsgLock {
    int64 EthereumChainID = 1;
    string TokenContract = 2;
    string Chain33Sender = 3;
    string EthereumReceiver = 4;
    uint64 Amount = 5;
    string localCoinSymbol = 6;
    string localCoinExec = 7;
}

message ReceiptEthBridgeClaim {
    int64 EthereumChainID = 1;
    string BridgeContractAddress = 2;
    int64 Nonce = 3;
    string localCoinSymbol = 4;
    string localCoinExec = 5;
    string TokenContractAddress = 6;
    string EthereumSender = 7;
    string Chain33Receiver = 8;
    string ValidatorAddress = 9;
    uint64 Amount = 10;
    int64 ClaimType = 11;
    string EthSymbol = 12;
    bytes xTxHash = 13;
    uint64 xHeight = 14;
}

message ReceiptBurn {
    int64 EthereumChainID = 1;
    string TokenContract = 2;
    string Chain33Sender = 3;
    string EthereumReceiver = 4;
    uint64 Amount = 5;
    string localCoinSymbol = 6;
    string localCoinExec = 7;
    bytes xTxHash = 8;
    uint64 xHeight = 9;
}

message ReceiptLock {
    int64 EthereumChainID = 1;
    string TokenContract = 2;
    string Chain33Sender = 3;
    string EthereumReceiver = 4;
    uint64 Amount = 5;
    string localCoinSymbol = 6;
    string localCoinExec = 7;
    bytes xTxHash = 8;
    uint64 xHeight = 9;
}

message ReceiptLogIn {
    string address = 1;
    double power = 2;
    bytes xTxHash = 3;
    uint64 xHeight = 4;
    repeated MsgValidator validators = 5;
}

message ReceiptLogOut {
    string address = 1;
    double power = 2;
    bytes xTxHash = 3;
    uint64 xHeight = 4;
    repeated MsgValidator validators = 5;
}

message ReceiptSetConsensusNeeded {
    double preConsensusNeeded = 1;
    double nowConsensusNeeded = 2;
    bytes xTxHash = 3;
    uint64 xHeight = 4;
}

message QueryEthProphecyParams {
    int64 EthereumChainID = 1;
    string BridgeContractAddress = 2;
    int64 Nonce = 3;
    string Symbol = 4;
    string TokenContractAddress = 5;
    string EthereumSender = 6;
}

message QueryEthProphecyResponse {
    string ID = 1;
    ProphecyStatus Status = 2;
    repeated EthBridgeClaim Claims = 3;
}

message ProphecyStatus {
    EthBridgeStatus Text = 1;
    string FinalClaim = 2;
}


service x2ethereum {

}
